@startuml classDiagram
left to right direction

package Entities {
    class Discounted {
        -int discountPercent
        +Discounted(float price, Screening screening, SeatReservation seat, int discountPercent)
        +calculatePrice(): float
        +getReservationSeats()
    }

    class Film {
        -Long id
        -String title
        -int length
        +Film(title: String, length: int)
    }

    class Group {
        -int numberOfpeople
        -List<SeatReservation> seats
        +Group(float price, Screening screening, SeatReservation seat, int discountPercent)
        +calculatePrice(): float
        +getReservationSeats()
    }

    class Normal {
        -List<SeatReservation> seats
        +Normal(float price, Screening screening, SeatReservation seat)
        +calculatePrice(): float
        +getReservationSeats()
    }

    class Screening{
        -Long id
        -LocalTime startTime
        -LocalDate screeningDate
        -Film film
        -ScreeningRoom screeningRoom
        -List<SeatReservation> reservations
        -List<Ticket> tickets;
        +Screening(LocalTime startTime, LocalDate screeningDate, Film film, ScreeningRoom screeningRoom)
    }

    class ScreeningRoom{
        -Long id
        -String name
        -int rowNumber
        -int seatsInRow
        -List<Screening> screenings
        -List<Seat> seats
        +ScreeningRoom(String name, int rowNumber, int seatsInRow)
    }

    class Seat {
        -Long id
        -int row
        -int number
        -ScreeningRoom screeningRoom
        -List<SeatReservation> reservations
        +Seat(int row, int number, ScreeningRoom screeningRoom)
    }

    class SeatReservation {
        -Long id
        -Seat seat
        -Screening screening
        +SeatReservation(Seat seat, Screening screening)
    }

    abstract class Ticket {
        -Long id
        -float basePrice
        -Screening screening
        -SeatReservation seat
        +abstract calculatePrice()
        +abstract List<SeatReservation> getReservedSeats();
        ~Ticket(float basePrice, Screening screening, SeatReservation seat)
        +toString()
    }
    Ticket --|> Normal
    Ticket --|> Group
    Ticket --|> Discounted
}


package Repository {
    interface FilmRepository 
    interface ScreeningRepository
    interface ScreeeningRoomRepository
    interface SeatRepositoryRepository
    interface SeatReservationRepository
    interface TicketReposiotry
}

package Service {
    class FilmService {
        -final FilmRepository filmRepository
        +FilmService(FilmRepository filmRepository)
        +List<Film> findAllFilms()
        +Film createFilm(String title, int runtime)
        +void removeFilm(Long id)
        +Film updateFilm(String title, int runtime, Long id)
    }

    class ReservationService {
        -final ScreeningRepository screeningRepository
        -final SeatReservationRepository seatReservationRepository
        +ReservationService(ScreeningRepository screeningRepository, SeatReservationRepository seatReservationRepository)
        +List<SeatReservation> getReservationsForScreening(Long screeningId)
        +SeatReservation makeReservation(Long screeningId, int row, int seatNumber) 
    }

    class ScreeningRoomService {
        -final ScreeningRoomRepository screeningRoomRepository
        +ScreeningRoomService(ScreeningRoomRepository screeningRoomRepository)
        +ScreeningRoom getScreeningRoomById(Long id)
        +ScreeningRoom getScreeningRoomByName(String name)
        +List<ScreeningRoom> getScreeningRooms()
        +ScreeningRoom createScreeningRoom(String name, int rows, int seatsInRow)
        +void deleteScreeningRoom(Long id)
    }

    class ScreeningService {
        -final ScreeningRepository screeningRepository;
        -final ScreeningRoomRepository screeningRoomRepository;
        -final FilmRepository filmRepository;
        +ScreeningService(ScreeningRepository screeningRepository, ScreeningRoomRepository screeningRoomRepository, FilmRepository filmRepository)
        +List<Screening> getScreeningsByDate(LocalDate date)
        +List<Screening> getScreeningsByFilm(Long filmId)
        +List<Screening> getAllScreenings()
        +Screening createScreening(LocalDate screeningDate, LocalTime startTime, Long filmId, Long screeningRoomId)
    }

    class TicketService {
        -final TicketRepository ticketRepository
        -final ScreeningRepository screeningRepository
        -final ReservationService reservationService
        +TicketService(TicketRepository ticketRepository, ScreeningRepository screeningRepository,
                            ReservationService reservationService)
        +Ticket createNormalTicket(float price, Long screeningId, int row, int column)
        +Ticket createDiscountedTicket(float price, int discount, Long screeningId, int row, int column)
        +Ticket createGroupTicket(float price, int numberOfPeople, List<int[]> seats, Long screeningId)
        +List<Ticket> getTicketsForScreening(Long screeningId)
    }
}

package Controllers {
    class FilmController {
        -final FilmService filmService
        -final ModelMapper modelMapper
        +FilmController(FilmService filmService, ModelMapper modelMapper)
        +List<FilmDto> getAllFilms()
    }

    class ReservationController {
        -final ReservationService reservationService;
        -final ModelMapper modelMapper;
        +ReservationController(ReservationService reservationService, ModelMapper modelMapper)
    }

    class ScreeningController {
        -final ScreeningService screeningService;
        -final ModelMapper modelMapper;
        +ScreeningController(ScreeningService screeningService, ModelMapper modelMapper)
    }

    class ScreeeningRoomController {
        -final ScreeningRoomService screeningRoomService
        -final ModelMapper modelMapper
        +ScreeningRoomController(ScreeningRoomService screeningRoomService, ModelMapper modelMapper)
    }

    class TicketController {
        -final TicketService ticketService;
        -final ModelMapper modelMapper;
        +TicketController(TicketService ticketService, ModelMapper modelMapper)
    }
}

@enduml